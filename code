#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <cmath>

using namespace std;

const int NUM_ANTS = 10;
const int NUM_CITIES = 5;
const double ALPHA = 1.0; // Влияние феромонов
const double BETA = 2.0; // Влияние расстояния
const double EVAPORATION_RATE = 0.5; // Скорость испарения феромонов
const double Q = 100.0; // Количество феромонов, добавляемых после нахождения пути

struct City {
    int x, y;

    double distanceTo(const City& other) const {
        return sqrt(pow(x - other.x, 2) + pow(y - other.y, 2));
    }
};

class Ant {
public:
    vector<bool> visited;
    vector<int> path;
    double totalDistance;

    Ant(int numCities) : visited(numCities, false), totalDistance(0.0) {}

    void visitCity(int city) {
        path.push_back(city);
        visited[city] = true;
    }

    void reset(int numCities) {
        visited.assign(numCities, false);
        path.clear();
        totalDistance = 0.0;
    }
};

class AntColony {
public:
    vector<City> cities;
    vector<vector<double>> pheromones;
    vector<vector<double>> distances;

    AntColony(const vector<City>& cities) : cities(cities) {
        int numCities = cities.size();
        pheromones.resize(numCities, vector<double>(numCities, 1.0));
        distances.resize(numCities, vector<double>(numCities));
        for (int i = 0; i < numCities; ++i) {
            for (int j = 0; j < numCities; ++j) {
                distances[i][j] = cities[i].distanceTo(cities[j]);
            }
        }
    }

    void updatePheromones(const vector<int>& bestPath, double bestDistance) {
        for (int i = 0; i < bestPath.size() - 1; ++i) {
            int from = bestPath[i];
            int to = bestPath[i + 1];
            pheromones[from][to] += Q / bestDistance;
            pheromones[to][from] += Q / bestDistance; // Граф неориентированный
        }
        // Испарение феромонов
        for (int i = 0; i < pheromones.size(); ++i) {
            for (int j = 0; j < pheromones[i].size(); ++j) {
                pheromones[i][j] *= (1 - EVAPORATION_RATE);
            }
        }
    }
    
    vector<int> findBestPath() {
        double bestDistance = numeric_limits<double>::max();
        vector<int> bestPath;

        for (int antIndex = 0; antIndex < NUM_ANTS; ++antIndex) {
            Ant ant(cities.size());
            int startCity = rand() % cities.size();
            ant.visitCity(startCity);

            for (int step = 0; step < cities.size() - 1; ++step) {
                int currentCity = ant.path.back();
                double totalProbability = 0.0;
                vector<double> probabilities(cities.size(), 0.0);
                
                for (int nextCity = 0; nextCity < cities.size(); ++nextCity) {
                    if (!ant.visited[nextCity]) {
                        probabilities[nextCity] = pow(pheromones[currentCity][nextCity], ALPHA) *
                                                 pow(1.0 / distances[currentCity][nextCity], BETA);
                        totalProbability += probabilities[nextCity];
                    }
                }

                double randValue = (rand() / (double)RAND_MAX) * totalProbability;
                double cumulativeProbability = 0.0;
                for (int nextCity = 0; nextCity < cities.size(); ++nextCity) {
                    if (!ant.visited[nextCity]) {
                        cumulativeProbability += probabilities[nextCity];
                        if (cumulativeProbability >= randValue) {
                            ant.visitCity(nextCity);
                            ant.totalDistance += distances[currentCity][nextCity];
                            break;
                        }
                    }
                }
            }

            // Закрываем цикл коммивояжера
            int lastCity = ant.path.back();
            ant.totalDistance += distances[lastCity][startCity];

            ant.path.push_back(startCity);

            if (ant.totalDistance < bestDistance) {
                bestDistance = ant.totalDistance;
                bestPath = ant.path;
            }
        }

        updatePheromones(bestPath, bestDistance);
        return bestPath;
    }
};

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(0));

    vector<City> cities = {
        {0, 0},
        {1, 2},
        {2, 4},
        {3, 1},
        {4, 3}
    };

    AntColony colony(cities);
    vector<int> bestPath;

    for (int iteration = 0; iteration < 100; ++iteration) {
        bestPath = colony.findBestPath();
    }

    double minDistance = 0.0;
    for (int i = 0; i < bestPath.size() - 1; ++i) {
        minDistance += cities[bestPath[i]].distanceTo(cities[bestPath[i + 1]]);
    }
    minDistance += cities[bestPath.back()].distanceTo(cities[bestPath.front()]);

    cout << "Best path: ";
    for (int city : bestPath) {
        cout << city << " ";
    }
    cout << "\nDistance: " << minDistance << endl;

    return 0;
}
